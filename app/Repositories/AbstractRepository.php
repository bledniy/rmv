<?php

namespace App\Repositories;

use App\Contracts\HasLocalized;
use App\Models\Language;
use App\Models\Model;
use App\Models\ModelLang;
use App\Repositories\Admin\LanguageRepository;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Support\Collection;
use Illuminate\Support\Facades\DB;
use Prettus\Repository\Eloquent\BaseRepository;
use RuntimeException;
use Throwable;

abstract class AbstractRepository extends BaseRepository
{
    public function modelLang()
    {
        return '';
    }

    /**
     * @return \Illuminate\Database\Eloquent\Model
     * @throws \Prettus\Repository\Exceptions\RepositoryException
     */
    public function makeModel()
    {
        return parent::makeModel(); // TODO: Change the autogenerated stub
    }

    public function findOneByField($field, $value = null, $columns = ['*']): ?\Illuminate\Database\Eloquent\Model
    {
        $this->applyCriteria();
        $this->applyScope();
        $model = $this->model->where($field, '=', $value)->first($columns);
        $this->resetModel();

        return $this->parserResult($model);
    }

    protected function getLanguagesList(): Collection
    {
        static $languages;
        if (null === $languages) {
            $languages = $this->app->make(LanguageRepository::class)->getForCreateEntity();
        }

        return Language::all();
    }

    protected function getCurrentLanguage(): Language
    {
        foreach ($this->getLanguagesList() as $language) {
            if ($language->getKey() === getCurrentLangId()) {
                return $language;
            }
        }
        throw new RuntimeException('Language not defined');
    }

    public function whereUrl(string $url): Builder
    {
        return $this->where('url', $url);
    }

    public function findByUrl(string $url)
    {
        return $this->whereUrl($url)->first();
    }

    public function makeModelLang(): ?Model
    {
        try {
            return $this->app->make($this->modelLang());
        } catch (Throwable $e) {
            throw new RuntimeException('Model lang not defined ' . __METHOD__);
        }
    }

    public function update(array $attributes, $id)
    {
        $methodExists = (is_object($id) && method_exists($id, 'fillExisting'));
        $isModel = ($id instanceof Model);

        $model = ($methodExists || $isModel) ? $id : $this->find($id);
        if (!$model) {
            return null;
        }
        $model->fillExisting($attributes)->save();
        /** @var  $entityLang ModelLang */
        if (classImplementsInterface($model, HasLocalized::class)) {
            $language = $this->getCurrentLanguage();
            $entityLang = $model->lang ?? $this->makeModelLang();
            $attributes[$model->getForeignKey()] = $model->getKey();
            $attributes[$language->getForeignKey()] = $language->getKey();
            $entityLang->fillExisting($attributes)->save();
        }
        return $model;
    }

    public function create(array $attributes)
    {
        $res = ($entity = $this->makeModel())->fillExisting($attributes)->save();
        if (!$res) {
            return null;
        }
        if (classImplementsInterface($entity, HasLocalized::class)) {
            $languages = $this->getLanguagesList();
            foreach ($languages as $language) {
                $attributes[$entity->getForeignKey()] = $entity->getKey();
                $attributes[$language->getForeignKey()] = $language->getKey();
                $entityLang = $this->makeModelLang();
                $entityLang->fillExisting($attributes)->save();
            }
        }

        return $entity;
    }

    public function delete($id)
    {
        if ($id instanceof \Illuminate\Database\Eloquent\Model) {
            $id = $id->getKey();
        }

        return parent::delete($id);
    }


    public function whereModel(\Illuminate\Database\Eloquent\Model $model)
    {
        $this->model = $this->model->where($model->getForeignKey(), $model->getKey());

        return $this;
    }

    public function createRelated(array $attributes, \Illuminate\Database\Eloquent\Model $model)
    {
        $attributes[$model->getForeignKey()] = $model->getKey();

        return $this->create($attributes);
    }

    public function createParent(array $attributes, \Illuminate\Database\Eloquent\Model $model)
    {
        $attributes['parent_id'] = $model->getKey();

        return $this->create($attributes);
    }

    /**
     * @param Builder $builder
     * @return Builder
     * @throws \Prettus\Repository\Exceptions\RepositoryException
     */
    public function joinLang($builder = null): Builder
    {
        $builder = $builder ?: $this->model;
        $m = $this->makeModel();
        $lm = $this->makeModelLang();

        return $builder->leftJoin($lm->getTable(), function ($join) use ($m, $lm) {
            $table = $m->getTable();
            $langTable = $lm->getTable();
            $join->on($table . '.' . $m->getKeyName(), $langTable . '.' . $m->getForeignKey())
                ->on($langTable . '.language_id', '=', DB::raw(getCurrentLangId()))
            ;
        });
    }

    public function truncate()
    {
        if (classImplementsInterface($this->model(), HasLocalized::class)) {
            DB::table(($this->makeModelLang())->getTable())->delete();
        }
        DB::table(($this->makeModel())->getTable())->delete();
    }


}
