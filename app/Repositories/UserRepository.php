<?php

namespace App\Repositories;

use App\Criteria\ActiveCriteria;
use App\Criteria\User\PerformerActiveAccountCriteria;
use App\Criteria\User\UserFilterCriteria;
use App\DataContainers\Admin\User\SearchDataContainer;
use App\Models\User;
use Illuminate\Database\Eloquent\Model;


class UserRepository extends AbstractRepository
{
    /**
     * @return string
     *  Return the model
     */
    public function model()
    {
        return User::class;
    }

    /**
     * @param          $id
     * @param string[] $columns
     * @return User
     */
    public function find($id, $columns = ['*'])
    {
        return parent::find($id, $columns); // TODO: Change the autogenerated stub
    }

    /**
     * @param $field
     * @param null $value
     * @param string[] $columns
     * @return \App\Models\User | null
     */
    public function findOneByField($field, $value = null, $columns = ['*']): ?Model
    {
        return parent::findOneByField($field, $value, $columns); // TODO: Change the autogenerated stub
    }

    public function addAdminCriteriaToQuery()
    {
        return $this;
    }

    public function addPublicCriteriaToQuery()
    {
        $this->pushCriteria(ActiveCriteria::class);

        return $this;
    }

    public function getListAdmin(?SearchDataContainer $searchDataContainer = null)
    {
        if ($searchDataContainer) {
            $this->applyFilter($searchDataContainer);
        }
        $this->addSelectIsCustomer();
        $this->addSelectIsPerformer();
        $this->model->selectRaw('users.*');
        $this->model->orderByDesc('id');

        return $this->paginate();
    }

    public function applyFilter(SearchDataContainer $searchDataContainer)
    {
        $this->pushCriteria($this->app->make(UserFilterCriteria::class, compact('searchDataContainer')))
            ->applyCriteria()
            ->resetCriteria()
        ;

        return $this;
    }

    public function findCustomer($userId): User
    {
        return $this->find($userId);
    }

    protected function addSelectIsCustomer()
    {
        return $this->model = $this->model->addSelect(\DB::raw('(select customer_id from orders where users.id = orders.customer_id limit 1) as customer_has_deal'));
    }

    protected function addSelectIsPerformer()
    {
        return $this->model = $this->model->addSelect(\DB::raw('(select category_id from performer_categories where users.id = performer_categories.user_id limit 1) as performer_confirm_category'));
    }

}
